# If you use the "git" strategy:
# - you must set a repository (no default)
project_git_repo: "{{ project.repo }}"
project_subtree: "{{ project.subtree | default(false) }}"
# - you can set the git ref to deploy (can be a branch, tag or commit hash)
project_version: "{{ project.branch | default('master') }}"

# If you use the "rsync" strategy:
# - you can set a timeout for the synchonize module
project_deploy_synchronize_timeout: 30
# - you can also delete files that don't exist on source after synchronizing
project_deploy_synchronize_delete: false
# - you must set the path to your local source (the default assumes your playbook is located in /ansible/ ) project_local_path: "../"

# The source_path is used to fetch the tags from git, or synchronise via rsync. This way
# you do not have to download/sync the entire project on every deploy
project_source_path: "{{ project_root }}/shared/source"

# Files or folders to remove from the source when deploying
project_unwanted_items: ['.git']

# There are certain folders you'll want to copy from release to release to speed up deploys.
# Examples: Composer's `vendor` folder, npm's `node_modules`.
# These should not be part of project_shared_children since dependencies need to be atomic and tied to a deploy.
project_copy_folders:
  - vendor

# All the files to copy to the remote system on deploy. These could contain config files.
# Example:
# project_local_files:
#   - name: "some_file"           // <- optional, for your own reference and readability
#     src: "local-path-to-file"   // <- relative or absolute, just like Ansible
#     dest: "remote-path-to-file"
#   - name: compiled theme assets
#     src: "{{ project.local_path }}/web/app/themes/sage/dist"
#     dest: web/app/themes/sage
project_local_files: []

# All the templates to process on the remote system on deploy. These could contain config files.
# `src` and `dest` paths work the same as project_local_files.
project_templates:
  - name: .env config
    src: roles/deploy/templates/env.j2
    dest: .env

# The shared_children is a list of all files/folders in your project that need to be linked to a path in "/shared".
# For example a sessions directory or an uploads folder. They are created if they don't exist, with the type
# specified in the `type` key (file or directory).
# Example:
# project_shared_children:
#   - path: "app/sessions"
#     src: "sessions"
#     type: "file" / "directory"  // <- optional, defaults to "directory"
project_shared_children:
  - path: web/app/uploads
    src: uploads

# The project_environment is a list of environment variables added to the various *_commands
# Example:
# project_environment:
#   WP_ENV: "production"
project_environment:
  WP_ENV: "{{ project.env.wp_env }}"

# There are a few moments in this role where arbitrary command(s) can be run. These commands receive
# the "project_environment" so deploys for different stages can be done by changing this.
# Each command is a dict with a `cmd` and an optional `path`. The `path` is relative to the
# local bedrock-ansible directory (for `project_pre_build_commands_local`) or relative to the
# `new_release_path` on the remote server (for `project_pre_build_commands` and `project_post_build_commands`).
# Examples:
# project_pre_build_commands_local:
#   - path: "{{ project.local_path }}/web/app/themes/sage"
#     cmd: gulp --production
# project_post_build_commands:
#   - path: web/app/themes/mytheme
#     cmd: npm install && gulp --production
#   - cmd: wp db import posts.sql
project_pre_build_commands_local: []
project_pre_build_commands: []
project_post_build_commands:
  - cmd: "composer install --no-ansi --no-dev --no-interaction --no-progress --optimize-autoloader --no-scripts"

# Post finalize commands are run with Ansible's `shell` module.
# These are meant primarily for service restarts such as php5-fpm or memcached.
project_post_finalize_commands:
  - sudo service php5-fpm reload

# At the end of the role, the unfinished_filename is removed and the "current" symlink is set to
# the release. If you need to perform your own actions before this happens, set "project_finalize"
# to false, and when you're ready, perform these tasks yourself:
# - file: path="{{ deploy.new_release_path }}/{{ deploy.unfinished_filename }}" state=absent
# - file: src="{{ deploy.new_release_path }} dest={{ deploy.current_path }}" state=link
project_finalize: true
